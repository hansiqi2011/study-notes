* STL vector适用于对象 {{cloze 简单}}，变化 {{cloze 较小}}，并且 {{cloze 频繁随机访问}}的场景  #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:22:39.797Z
:card-last-reviewed: 2022-07-26T00:22:39.798Z
:card-last-score: 5
:END:
* 使用STL vector应该include那个头文件？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:47:22.739Z
:card-last-reviewed: 2022-07-26T00:47:22.740Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
#include <vector>
#+END_SRC
* 怎样定义一个vector? #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 4.59
:card-repeats: 2
:card-ease-factor: 2.46
:card-next-schedule: 2022-08-02T14:23:23.754Z
:card-last-reviewed: 2022-07-29T00:23:23.754Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
vector<int> v;//定义一个vector，其中的元素为int类型
vector<int> v = { 1, 2, 3 }; //初始化vector，v:{1, 2, 3}
vector<int> v(len);//定义一个长度为len的vector
vector<int> v(len, x);//定义一个长度为len的vector，初始化每个元素为x
vector<int> v2(v1);//用v1给v2赋值，v1的类型为vector<int>
#+END_SRC
* 怎样定义一个二维vector? #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:23:06.592Z
:card-last-reviewed: 2022-07-26T00:23:06.592Z
:card-last-score: 5
:END:
** #+BEGIN_SRC
vector<vector<int> > vec; //注意：> >之间要加空格
#+END_SRC
* 怎样操作vector尾部的元素？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:23:34.211Z
:card-last-reviewed: 2022-07-26T00:23:34.211Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
vector<int> v = { 1, 2, 3 };
v.push_back(4);//在vector的尾部插入元素4，v:{1, 2, 3, 4}
v.pop_back();//删除vector的最后一个元素，v:{1, 2, 3}
#+END_SRC
* 怎样访问vector的第一个和最后一个元素？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 29.79
:card-repeats: 2
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-25T18:28:46.426Z
:card-last-reviewed: 2022-07-27T00:28:46.427Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
vector<int> v = { 1, 2, 3 };
v.front(); // 1
v.back(); // 3
#+END_SRC
* 怎样访问vector指定位置的元素？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:34:47.212Z
:card-last-reviewed: 2022-07-26T00:34:47.213Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
vector<int> v = { 1, 2, 3 };
v[1]; // 2
v.at(2); // 3
#+END_SRC
* 怎样获得vector的元素个数？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:34:31.217Z
:card-last-reviewed: 2022-07-26T00:34:31.217Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
v.size(); //返回vector中元素的个数
#+END_SRC
* 怎样判断vector是否为空？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:36:44.588Z
:card-last-reviewed: 2022-07-26T00:36:44.588Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
v.empty(); //返回vector是否为空，若为空则返回true否则返回false
#+END_SRC
* 怎样清空一个vector？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:21:09.605Z
:card-last-reviewed: 2022-07-26T00:21:09.605Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
v.clear(); //清空vector
#+END_SRC
* 怎样向vector中插入元素？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 28.75
:card-repeats: 2
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-24T18:31:37.893Z
:card-last-reviewed: 2022-07-27T00:31:37.894Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
v.insert(v.begin(), 1);//在迭代器it所指向的位置前插入元素1，返回插入元素的迭代器
#+END_SRC
* 怎样删除vector中的某些元素？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:48:44.267Z
:card-last-reviewed: 2022-07-26T00:48:44.268Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
v.erase(v.begin()); //删除迭代器it所指向的元素，即删除第一个元素
v.erase(v.begin(), v.begin() + 2); //删除区间[v.begin(), v.begin() + 2)的所有元素
#+END_SRC
* 怎样根据下标进行vector的遍历？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 29.79
:card-repeats: 2
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-25T18:29:16.939Z
:card-last-reviewed: 2022-07-27T00:29:16.939Z
:card-last-score: 5
:END:
** #+BEGIN_SRC c++
for (int i = 0; i < v.size(); i++)
	cout << v[i] << ' ';
#+END_SRC
* 怎样使用迭代器遍历vector？ #card #[[C++ STL]]
:PROPERTIES:
:card-last-interval: 31.07
:card-repeats: 1
:card-ease-factor: 2.6
:card-next-schedule: 2022-08-26T01:40:18.369Z
:card-last-reviewed: 2022-07-26T00:40:18.370Z
:card-last-score: 5
:END:
** #+BEGIN_SRC  c++
for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	cout << (*it) << ' ';
#+END_SRC