* 把节点 node或称顶点vertex用边edge连接起来就构成了图graph
* 一些关于图的重点概念
** 有向图和无向图 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:30:27.269Z
:card-last-reviewed: 2022-10-06T13:30:27.269Z
:card-last-score: 5
:END:
*** 连接节点的边是单向的还是双向的
** 图的节点的度是什么 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:29:27.786Z
:card-last-reviewed: 2022-10-06T13:29:27.786Z
:card-last-score: 5
:END:
*** 无向图中与节点相连的边的数目
** 入度和出度 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:31:04.793Z
:card-last-reviewed: 2022-10-06T13:31:04.793Z
:card-last-score: 5
:END:
*** 有向图中以某节点为终点的边的数量称为入度，为起点的边的数量称为出度
** 边的权重 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:29:17.673Z
:card-last-reviewed: 2022-10-06T13:29:17.673Z
:card-last-score: 5
:END:
*** 边的“成本”，可以直观的想象成边的长度
** 连通 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:31:01.804Z
:card-last-reviewed: 2022-10-06T13:31:01.804Z
:card-last-score: 5
:END:
*** 若图中两节点U、V之间，存在一条从U出发，经过若干边到达V的通路，则称U、V是连通的，这些经过的边称为路径
** 回路/环 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:29:36.290Z
:card-last-reviewed: 2022-10-06T13:29:36.290Z
:card-last-score: 5
:END:
*** 起点和终点相同的路径称为回路或者环
** 完全图 #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-27T03:52:51.396Z
:card-last-reviewed: 2022-10-15T23:52:51.396Z
:card-last-score: 5
:END:
*** 一个n个节点的完全无向图包含$n \times (n-1) \div 2$条边
*** 一个n个节点的完全有向图包含$n \times (n-1)$条边
*** 稠密图：边数接近完全图边数，稀疏图：边数远小于完全图边数
* 图的遍历
** 什么是图的遍历？ #card #数据结构
:PROPERTIES:
:card-last-interval: 6183.53
:card-repeats: 3
:card-ease-factor: 2.7
:card-next-schedule: 2039-09-04T01:09:17.626Z
:card-last-reviewed: 2022-09-29T13:09:17.627Z
:card-last-score: 5
:END:
*** 从图的一个节点出发，系统的访问图的所有节点，使得每个节点恰好被访问一次，这种操作称为图的遍历
*** 有n个节点的图的深度优先遍历和广度优先遍历的时间复杂度都是O(n*n)
* 一笔画问题
** 如果一个图存在一笔画，一笔画完的路径称作欧拉路，如果最后又回到了起点，称为欧拉回路
** 奇点的定义  #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:31:32.103Z
:card-last-reviewed: 2022-10-06T13:31:32.103Z
:card-last-score: 5
:END:
*** 相连的边的数量为奇数条的节点
** 存在欧拉路的条件是：  #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:31:35.995Z
:card-last-reviewed: 2022-10-06T13:31:35.995Z
:card-last-score: 5
:END:
*** 图是连通的，有且只有两个奇点
** 存在欧拉回路的条件是：  #card #数据结构
:PROPERTIES:
:card-last-interval: 11.2
:card-repeats: 3
:card-ease-factor: 2.8
:card-next-schedule: 2022-10-17T17:31:38.347Z
:card-last-reviewed: 2022-10-06T13:31:38.347Z
:card-last-score: 5
:END:
*** 图是连通的，有0个奇点